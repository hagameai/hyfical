# Project Documentation

## Overview
This project provides a set of Python classes for performing basic Git operations encapsulated in the `GitOperations` class. It includes functionality such as repository initialization and file addition.

## File Structure
- **Total Files:** 125
- **Total Lines:** 7813
- **File Types:**
  - Python Files (`.py`): 80
  - Markdown Files (`.md`): 45

## GitOperations Class

### Methods

#### `initialize_repository(repo_name)`
Initializes a new Git repository in the specified directory.

- **Parameters:**
  - `repo_name` (str): The name of the repository to be created.
- **Returns:** 
  - `bool`: True if initialization is successful, False otherwise.
- **Usage Example:**
  ```python
  GitOperations.initialize_repository("my_repo")
  ```

#### `add_file(repo_name, file_name)`
Adds a file to the specified Git repository.

- **Parameters:**
  - `repo_name` (str): The name of the repository.
  - `file_name` (str): The name of the file to be added.
- **Returns:** 
  - `bool`: True if the file is added successfully, False otherwise.
  
## Testing
The project includes unit tests for the `GitOperations` class using the `unittest` framework. Tests include:

- `test_initialize_repository`: Validates successful repository creation.
- `test_initialize_existing_repository`: Checks handling of an existing repository scenario.

## Setup Instructions
1. Clone the repository.
2. Install required dependencies with:
   ```bash
   pip install -r requirements.txt
   ```
3. Run tests using:
   ```bash
   python -m unittest discover
   ```

## Contribution Guidelines
Contributions are welcome! Please ensure all code follows project conventions and includes adequate tests.